#This file contains the halo profile data extracted from Latif+ papers using PlotDigitizer.

#PlotDigitizer, 3.3.9, 2025, https://plotdigitizer.com
# @misc{
# url = {https://plotdigitizer.com},
# title = {PlotDigitizer: Version 3.3.9},
# year = {2025}
# }

import numpy as np
from scipy.integrate import cumulative_trapezoid
from collections import defaultdict
from physical_constants import Omega_b, Omega_m
import matplotlib.pyplot as plt
import os
import copy


from HaloProperties import get_Rvir_analytic

PC_TO_CM = 3.085677581e18
MSUN_G   = 1.98847e33
AU_TO_CM = 1.495978707e13
PC_TO_AU = PC_TO_CM / AU_TO_CM

RUNIT_TO_CM = {
    "pc": PC_TO_CM,
    "au": AU_TO_CM,
}
def _radius_unit_of_density(store, halo, j21):
    blk = store[halo]["density"][float(j21)]
    unit = (blk.get("units", {}) or {}).get("r", "pc")
    return str(unit).strip().lower()

# --- dataset registry ---
# STORE_REGISTRY: dict[str, dict] = {}

# def register_store(name: str, store):
#     """Register a dataset store under a simple name (case-insensitive)."""
#     STORE_REGISTRY[name.lower()] = store

# def get_store(name: str):
#     """Fetch a registered dataset by name."""
#     key = name.lower()
#     if key not in STORE_REGISTRY:
#         raise ValueError(f"Unknown dataset '{name}'. Available: {list(STORE_REGISTRY.keys())}")
#     return STORE_REGISTRY[key]


# ---- basic containerï¼šhalo -> quantity -> j21 -> {"r":..., "y":..., "units":...}

def make_store(store_name):
    """
    Create a profile/scalar store with the layout:
      store[halo][quantity][J21] -> {"r": array, "y": array, "units": {"r":..., "y":...}}
      store[halo][J21]           -> {"z_collapse":..., "M_collapse_Msun":..., "Tvir":..., ...}
    """
    store = defaultdict(lambda: defaultdict(dict))
    store["store_name"] = store_name
    return store
# Create per-paper stores
Latif2019_data  = make_store("Latif2019")
Latif2014A_data = make_store("Latif2014A")
Latif2021_data = make_store("Latif2021")
Latif2015_2e4K_data = make_store("Latif2015_2e4K")
Wise2019_data = make_store("Wise2019")


# register_store("Latif2019", Latif2019_data)
# register_store("Latif2014A", Latif2014A_data)
# register_store("Latif2021", Latif2021_data)


# ---------- key helpers ----------
def _jkey(j21) -> float:
    """Normalize J21 key to float to avoid 10 vs 10.0 mismatch."""
    return float(j21)

# ---------- add/read APIs (generic over store) ----------
def add_profile_to(store, halo, j21, quantity, r, y, r_unit="pc", y_unit=None):
    store[halo][quantity][_jkey(j21)] = {
        "r": np.asarray(r, float),
        "y": np.asarray(y, float),
        "units": {"r": r_unit, "y": y_unit},
    }

# set scalar value (only float)
def set_scalar_in(store, halo, j21, name, value):
    store[halo][_jkey(j21)][name] = float(value)

def set_meta_in(store, halo, j21, name, value):
    store[halo][_jkey(j21)][name] = value


def add_R200_for_all_LW(store, halo_name, unit):
    """
    Compute and add R200 (virial radius) for all J21 levels of a halo.

    Parameters:
        store     (dict): data store (e.g., Latif2019_data)
        halo_name (str):  name of the halo (e.g., "halo6")
        unit      (str):  output unit, either "pc" or "au"
    """
    
    j21_vals = []
    for key in store[halo_name]:
        try:
            float_key = float(key)
            j21_vals.append(float_key)
        except (TypeError, ValueError):
            continue  # skip non-numeric keys (e.g., "density", "fH2", etc.)

    for j21 in sorted(j21_vals):
        block = store[halo_name][j21]
        z = block.get("z_collapse", None)
        M = block.get("M_collapse_Msun", None)
        if z is None or M is None:
            print(f"Skipping {halo_name}, J21={j21}: missing z or M")
            continue

        Rvir_Mpc = get_Rvir_analytic(M, z)
        if unit == "pc":
            Rvir = Rvir_Mpc * 1e6
        elif unit == "au":
            Rvir = Rvir_Mpc * 1e6 * PC_TO_AU
        else:
            raise ValueError(f"Unsupported unit {unit}; must be 'pc' or 'au'.")

        set_scalar_in(store, halo_name, j21, "R200", Rvir)
        store[halo_name][j21]["R200_unit"] = unit
        print(f"store {store['store_name']}: Set R200 for {halo_name}, J21={j21:.1f}: {Rvir:.2e} {unit}")


# ------------------------------------------------------------
#                      Latif2019 data
# ------------------------------------------------------------

#Latif & Sadegh 2019 https://doi.org/10.1093/mnras/stz2812

#1. halo 6
#1.0 collapse properties
set_scalar_in(Latif2019_data, "halo6", 0.1, "z_collapse", 25.4)
set_scalar_in(Latif2019_data, "halo6", 0.1, "M_collapse_Msun", 7.6e5)
set_scalar_in(Latif2019_data, "halo6", 1.0, "z_collapse", 24.5)
set_scalar_in(Latif2019_data, "halo6", 1.0, "M_collapse_Msun", 1.2e6)
set_scalar_in(Latif2019_data, "halo6", 10.0, "z_collapse", 11.5)
set_scalar_in(Latif2019_data, "halo6", 10.0, "M_collapse_Msun", 5.7e7)
set_scalar_in(Latif2019_data, "halo6", 100.0, "z_collapse", 11.0)
set_scalar_in(Latif2019_data, "halo6", 100.0, "M_collapse_Msun", 6.3e7)
set_scalar_in(Latif2019_data, "halo6", 1000.0, "z_collapse", 10.6)
set_scalar_in(Latif2019_data, "halo6", 1000.0, "M_collapse_Msun", 6.7e7)
add_R200_for_all_LW(Latif2019_data, "halo6", unit="pc")

set_meta_in(Latif2019_data, "halo6", 1000.0, "formation_mode", "DCBH")

#1.1 M_enc profile
#(Menc, r) the same for J21=0.1 and 1.0
r01 = [0.00035, 0.00069, 0.00404, 0.0121, 0.10329, 1.0899, 7.85423, 45.46763, 379.38141, 1051.29983]
Menc01 = [0.01992, 0.30115, 16.70967, 69.69781, 320.09786, 2598.68239, 11766.59897, 34768.52715, 329098.2253, 2426517.68699]
add_profile_to(Latif2019_data, "halo6", 0.1, "M_enc",  r01, Menc01, r_unit="pc", y_unit="Msun")


add_profile_to(Latif2019_data, "halo6", 1.0, "M_enc",  r01, Menc01, r_unit="pc", y_unit="Msun")

r10 = [0.00056, 0.00164, 0.00452, 0.01914, 0.10766, 0.68431, 3.62174, 22.02055, 91.32361, 407.53673, 1484.40518]
Menc10 = [0.02091, 0.28719, 4.69984, 91.40065, 380.73462, 1755.5782, 9404.70814, 97885.65112, 725264.60559, 2583163.90617, 5338062.6527]
add_profile_to(Latif2019_data, "halo6", 10.0, "M_enc",  r10, Menc10, r_unit="pc", y_unit="Msun")

r100 = [0.00079, 0.0023, 0.00635, 0.02173, 0.08802, 0.48188, 1.62388, 8.6568, 48.09039, 247.64147, 1305.93423]
Menc100 = [0.04954, 0.86036, 9.60501, 118.22416, 697.33893, 2384.36329, 9064.68081, 36120.78278, 686441.63339, 2760925.10654, 5135942.1426]
add_profile_to(Latif2019_data, "halo6", 100.0, "M_enc",  r100, Menc100, r_unit="pc", y_unit="Msun")

r1e3 = [0.00045, 0.00102, 0.00299, 0.0093, 0.03864, 0.13931, 1.0459, 9.20296, 82.05128, 493.5039, 1848.25547]
Menc1e3 = [0.05776, 0.57917, 12.05993, 192.25975, 2386.47998, 14985.24882, 78619.98072, 361394.84373, 1494099.07065, 3944326.84803, 7615946.47632]
add_profile_to(Latif2019_data, "halo6", 1000.0, "M_enc",  r1e3, Menc1e3, r_unit="pc", y_unit="Msun")


#1.2 density profile
r01 = [0.00029, 0.00078, 0.00258, 0.00619, 0.01679, 0.04151, 0.1117, 0.42741, 0.78844, 1.32157, 2.0675, 4.10838, 7.80126, 24.54502, 83.34281, 210.55258, 593.11402, 1172.9761]
rho01 = 1.0e-24 * np.array([6676036375.4725, 5567284274.42254, 2941752221.67314, 1004635218.58635, 84964879.48948, 8549438.59941, 953025.53732, 129167.03329, 34624.77271, 22766.28197, 3072.93953, 508.66154, 64.72145, 5.50033, 1.15906, 0.21366, 0.04147, 0.02405])
add_profile_to(Latif2019_data, "halo6", 0.1, "density", r01, rho01, r_unit="pc", y_unit="g/cm^3")

r1 = [0.00029, 0.00078, 0.00258, 0.00718, 0.01919, 0.03995, 0.11464, 0.23425, 0.50577, 1.00734, 2.0675, 4.9583, 10.12032, 26.09247, 83.34281, 193.87067, 593.11402, 1172.9761]
rho1 = 1.0e-24*np.array([6676036375.4725, 5567284274.42254, 2941752221.67314, 1095622150.09972, 198226571.17579, 19775489.35551, 2148304.48494, 557040.58712, 35383.43833, 6297.38324, 3072.93953, 512.09462, 50.80204, 8.59027, 1.15906, 0.19954, 0.04147, 0.02405])
add_profile_to(Latif2019_data, "halo6", 1.0, "density", r1, rho1, r_unit="pc", y_unit="g/cm^3")

r10 = [0.00051, 0.00143, 0.0031, 0.00847, 0.02277, 0.04529, 0.11058, 0.32619, 0.76996, 1.7908, 2.82628, 5.73591, 9.27555, 17.04728, 44.64756, 91.84813, 475.44081, 1579.44347, 25.41432, 1004.94017]
rho10 = 1.0e-24*np.array([1095212795.11404, 1091127647.88932, 1008396540.90551, 341556983.36877, 90031637.12634, 14180280.55537, 1613533.47786, 200077.82296, 38200.62571, 34289.98263, 8164.97848, 13296.88224, 8713.53436, 1155.65551, 147.2641, 5.27685, 0.20822, 0.16344, 138.61337, 0.0823])
add_profile_to(Latif2019_data, "halo6", 10.0, "density", r10, rho10, r_unit="pc", y_unit="g/cm^3")

r100 = [0.00051, 0.00145, 0.00636, 0.03108, 0.8432, 0.11837, 0.27728, 1.5136, 2.82628, 5.29368, 9.55243, 112.70825, 475.44081, 1579.44347, 39.68564, 889.54949]
rho100 = 1.0e-24*np.array([1097717526.19304, 1096896621.25293, 656821109.84086, 142029271.05545, 63317.97653, 2467373.53578, 834868.35431, 53328.89635, 8091.95476, 2768.91762, 422.03676, 6.66972, 0.20429, 0.16031, 54.93343, 0.06053])
add_profile_to(Latif2019_data, "halo6", 100.0, "density", r100, rho100, r_unit="pc", y_unit="g/cm^3")

r1e3 = [0.0006, 0.00201, 0.01221, 0.05365, 1.83971, 0.1469, 0.37665, 3.38012, 9.1015, 112.70825, 361.61643, 1360.91106, 39.68564, 820.71265, 1816.7673]
rho1e3 = 1.0e-24*np.array([6842183804.26088, 5095471065.99368, 1926704050.31779, 259565424.94541, 76140.32924, 129931609.87845, 3785100.43162, 45151.52889, 1950.26949, 6.66972, 0.25964, 0.13855, 54.93343, 0.06698, 0.06272])
add_profile_to(Latif2019_data, "halo6", 1000.0, "density", r1e3, rho1e3, r_unit="pc", y_unit="g/cm^3")

#1.3 fH2 profile
r01 = [0.00029, 0.00076, 0.00154, 0.0036, 0.01057, 0.03824, 0.22964, 1.23441, 4.65921, 11.91119, 21.60988, 26.65703, 29.67299, 45.83186]
fH2_01 = [0.00536, 0.00565, 0.00459, 0.00312, 0.00196, 0.00133, 0.00104, 0.00087, 0.00055, 0.0002, 0.00007, 0.00003, 0.00002, 0.00001]
add_profile_to(Latif2019_data, "halo6", 0.1, "fH2", r01, fH2_01, r_unit="pc", y_unit=None)

r1 = [0.00042, 0.00083, 0.00168, 0.0036, 0.01057, 0.03824, 0.22964, 0.99363, 3.36506, 6.06289, 8.21556, 10.29322, 13.72205, 15.50683]
fH2_1 = [0.00444, 0.00389, 0.00341, 0.00312, 0.00196, 0.00133, 0.00104, 0.00062, 0.00047, 0.00031, 0.00012, 0.00006, 0.00002, 0.00001]
add_profile_to(Latif2019_data, "halo6", 1.0, "fH2", r1, fH2_1, r_unit="pc", y_unit=None)

r10 = [0.0005, 0.00193, 0.00542, 0.01464, 0.05303, 0.21793, 1.07813, 2.41321, 5.4761, 9.3343, 20.219, 42.07087, 65.86782, 79.97309]
fH2_10 = [0.00244, 0.0025, 0.00216, 0.00184, 0.00138, 0.00102, 0.0009, 0.00075, 0.00071, 0.0006, 0.0002, 0.00007, 0.00005, 0.00001]
add_profile_to(Latif2019_data, "halo6", 10.0, "fH2", r10, fH2_10, r_unit="pc", y_unit=None)

r100 = [0.00091, 0.0025, 0.00578, 0.01524, 0.04354, 0.13427, 0.32564, 0.79233, 1.31568, 2.29682, 4.54791, 5.92353, 7.22422, 8.54987]
fH2_100 = [0.00196, 0.00197, 0.0018, 0.00134, 0.00085, 0.00052, 0.0005, 0.00039, 0.0005, 0.00031, 0.00015, 0.00008, 0.00004, 0.00001]
add_profile_to(Latif2019_data, "halo6", 100.0, "fH2", r100, fH2_100, r_unit="pc", y_unit=None)

r1e3 = [2.14766, 2.2645, 2.88788, 3.95687, 4.9461, 5.10946]
fH2_1e3 = [0.00001, 0.00002, 0.00006, 0.00004, 0.00003, 0.00001]
add_profile_to(Latif2019_data, "halo6", 1000.0, "fH2", r1e3, fH2_1e3, r_unit="pc", y_unit=None)

#2. halo 1
set_scalar_in(Latif2019_data, "halo1", 0.1, "z_collapse", 24.5)
set_scalar_in(Latif2019_data, "halo1", 0.1, "M_collapse_Msun", 8.8e5)
set_scalar_in(Latif2019_data, "halo1", 1.0, "z_collapse", 23.9)
set_scalar_in(Latif2019_data, "halo1", 1.0, "M_collapse_Msun", 8.0e5)
set_scalar_in(Latif2019_data, "halo1", 5, "z_collapse", 15.4)
set_scalar_in(Latif2019_data, "halo1", 5, "M_collapse_Msun", 7.7e6)
set_scalar_in(Latif2019_data, "halo1", 10, "z_collapse", 15)
set_scalar_in(Latif2019_data, "halo1", 10, "M_collapse_Msun", 9.3e6)
set_scalar_in(Latif2019_data, "halo1", 50, "z_collapse", 12.6)
set_scalar_in(Latif2019_data, "halo1", 50, "M_collapse_Msun", 1.5e7)
set_scalar_in(Latif2019_data, "halo1", 100, "z_collapse", 11.7)
set_scalar_in(Latif2019_data, "halo1", 100, "M_collapse_Msun", 1.8e7)
set_scalar_in(Latif2019_data, "halo1", 1000, "z_collapse", 11.4)
set_scalar_in(Latif2019_data, "halo1", 1000, "M_collapse_Msun", 1.9e7)
add_R200_for_all_LW(Latif2019_data, "halo1", unit="pc")

#2.1 M_enc profile

#2.2 density profile
r0 = [0.00065, 0.00132, 0.00344, 0.01056, 0.02454, 0.05032, 0.15356, 0.65231, 2.17313, 7.86232, 17.92803, 111.31718, 648.16059, 60.8456, 305.52455, 406.6636, 525.52314, 846.30535]
rho0 = 1.0e-24*np.array([3518135780.27434, 3358307287.24769, 1817815986.08733, 596974873.72292, 79816641.99075, 14468155.76692, 1185138.9588, 53815.26286, 6764.4595, 247.67061, 29.91538, 1.19222, 0.17514, 3.64173, 0.52895, 14.93481, 0.87424, 0.0599])
add_profile_to(Latif2019_data, "halo1", 0.0, "density", r0, rho0, r_unit="pc", y_unit="g/cm^3")

r01 = [0.00034, 0.00127, 0.0032, 0.00674, 0.01694, 0.04054, 0.09879, 0.25853, 0.70681, 3.10899, 7.07326, 22.68678, 92.19933, 423.48338, 701.52518]
rho01 = 1.0e-24 * np.array([2876910403.77372, 2289087177.8256, 2282835188.42443, 1118060843.29187, 181950357.49772, 23809912.53676, 3168538.69654, 307388.37966, 26315.86303, 2327.18763, 163.30271, 12.06573, 1.74364, 0.97454, 0.1303])
add_profile_to(Latif2019_data, "halo1", 0.1, "density", r01, rho01, r_unit="pc", y_unit="g/cm^3")

r1 = [0.00033, 0.00086, 0.00318, 0.00674, 0.01757, 0.03593, 0.09879, 0.25853, 0.70681, 3.10899, 7.07326, 22.68678, 92.19933, 423.48338, 701.52518]
rho1 =1.0e-24 * np.array([5404968643.62274, 3512641828.02525, 2677348085.5781, 1118060843.29187, 168536988.63247, 16666257.24442, 3168538.69654, 307388.37966, 26315.86303, 2327.18763, 163.30271, 12.06573, 1.74364, 0.97454, 0.1303])
add_profile_to(Latif2019_data, "halo1", 1.0, "density", r1, rho1, r_unit="pc", y_unit="g/cm^3")

r5 = [0.00043246198102412666, 0.0016421900100564637, 0.006356727399716979, 0.02545564750584017, 0.09675351377944945, 0.3756625487879706, 0.5645354074640656, 0.7226755207462523, 1.1996168969384535, 2.4348336185338937, 5.321333228762902, 19.813218792892823, 112.35101706662647, 313.51895013443016, 808.7089589899316]
rho5 = 1.0e-24*np.array([1519793368.1251152, 1570724581.363684, 929572849.2847463, 98813668.47427365, 3606434.4225863963, 235015.6817276271, 3780627.572245374, 14505928.53943961, 230911.69653707076, 1599.5518666220332, 377.63230908395997, 14.284996980955503, 6.9094072447067205, 0.6679662135727504, 0.1653153922768664])
add_profile_to(Latif2019_data, "halo1", 5.0, "density", r5, rho5, r_unit="pc", y_unit="g/cm^3")

r10 = [0.00048230635070109886, 0.0016421900100564637, 0.006356727399716979, 0.015544691887878997, 0.042853200977141966, 0.09576208885577311, 0.2889577135438804, 0.6144569506852565, 1.2049620281730158, 2.872381660202119, 8.820838524856457, 22.498733393966585, 112.35101706662647, 313.51895013443016, 808.7089589899316]
rho10 =1.0e-24*np.array([2226636679.3744407, 1570724581.363684, 929572849.2847463, 333628602.60461193, 34139683.57738917, 2814897.544783489, 574903.9448900474, 161508.05385836613, 18952.83851578146, 1512.8956673206972, 254.11776584540104, 18.364374807450503, 6.9094072447067205, 0.6679662135727504, 0.1653153922768664])
add_profile_to(Latif2019_data, "halo1", 10.0, "density", r10, rho10, r_unit="pc", y_unit="g/cm^3")

r50 = [0.00048230635070109886, 0.0019395667532673823, 0.006356727399716979, 0.015544691887878997, 0.042853200977141966, 0.09576208885577311, 0.26666425448375003, 0.5110736539966564, 1.2049620281730158, 3.2724083825169683, 8.820838524856457, 29.010979367918175, 112.35101706662647, 313.51895013443016, 808.7089589899316]
rho50 = 1.0e-24*np.array([2226636679.3744407, 1743875674.4978206, 929572849.2847463, 333628602.60461193, 34139683.57738917, 2814897.544783489, 354445.5206094803, 69212.20025332393, 18952.83851578146, 3441.234588050047, 254.11776584540104, 49.536796541928545, 6.9094072447067205, 0.6679662135727504, 0.1653153922768664])
add_profile_to(Latif2019_data, "halo1", 50.0, "density", r50, rho50, r_unit="pc", y_unit="g/cm^3") 

r100 = [0.00044, 0.00108, 0.00315, 0.00713, 0.01694, 0.0442, 0.13708, 0.39575, 1.29814, 4.18251, 10.63536, 22.81536, 161.27474, 701.52518, 68.67869]
rho100 = 1.0e-24 * np.array([1692380846.95792, 1198585016.41695, 739217327.27461, 673577867.06067, 181950357.49772, 27213792.18295, 12683243.26118, 3129170.22792, 132130.93791, 10331.62066, 1445.40306, 194.92133, 2.44378, 0.1303, 21.97938])
add_profile_to(Latif2019_data, "halo1", 100.0, "density", r100, rho100, r_unit="pc", y_unit="g/cm^3")

r1000 = [0.00046, 0.00101, 0.00273, 0.00695, 0.01709, 0.05119, 0.13653, 0.39575, 1.29814, 4.18251, 10.63536, 22.81536, 161.27474, 701.52518, 68.67869]
rho1000 = 1.0e-24 * np.array([10008794781.14461, 8705731925.21613, 6084247081.14796, 2725901839.66557, 974019544.24272, 221377412.21515, 28253908.96922, 3129170.22792, 132130.93791, 10331.62066, 1445.40306, 194.92133, 2.44378, 0.1303, 21.97938])
add_profile_to(Latif2019_data, "halo1", 1000.0, "density", r1000, rho1000, r_unit="pc", y_unit="g/cm^3")


#2.3 fH2 profile
r0 = [0.00034, 0.00106, 0.0069, 0.02827, 0.16428, 0.84514, 3.83637, 10.33738, 22.98916, 48.29276, 203.35932, 420.68913, 108.95213, 718.95561]
fH2_0 = [0.00319, 0.00303, 0.00231, 0.00172, 0.0012, 0.00091, 0.00064, 0.00027, 0.00013, 0.00008, 0.00003, 0.00004, 0.00005, 0.00002]
add_profile_to(Latif2019_data, "halo1", 0.0, "fH2", r0, fH2_0, r_unit="pc", y_unit=None)

r01 = [0.0005, 0.00126, 0.00538, 0.02827, 0.16428, 0.84514, 3.83637, 10.33738, 18.58832, 26.10842, 34.6112, 67.00282]
fH2_01 = [0.0047, 0.00457, 0.00293, 0.00172, 0.0012, 0.00091, 0.00064, 0.00027, 0.00011, 0.00005, 0.00002, 0.00001]
add_profile_to(Latif2019_data, "halo1", 0.1, "fH2", r01, fH2_01, r_unit="pc", y_unit=None)

r1 = [0.00052, 0.00181, 0.00538, 0.02827, 0.14517, 0.72707, 2.42141, 6.78575, 11.75897, 15.13466, 18.14938, 21.30909]
fH2_1 = [0.0049, 0.00377, 0.00293, 0.00172, 0.00118, 0.00081, 0.00055, 0.00033, 0.00012, 0.00005, 0.00002, 0.00001]
add_profile_to(Latif2019_data, "halo1", 1.0, "fH2", r1, fH2_1, r_unit="pc", y_unit=None)

r5 = [0.0004259313185670526, 0.001781979519906398, 0.008337973634367963, 0.032533208411717626, 0.09196130011149084, 0.26641438975941195, 0.753425512147508, 2.02128638582587, 4.408469949003642, 7.11222710447131, 10.952162590337483]
fH2_5 = [0.0025798035219728433, 0.002726940442761194, 0.0022937804201509926, 0.0012494570657738211, 0.0008790724567173884, 0.0007558836102784575, 0.0006588162258881097, 0.00033378657622362126, 0.00011010232793485985, 0.00004342548791638736, 0.000013909966999458965]
add_profile_to(Latif2019_data, "halo1", 5.0, "fH2", r5, fH2_5, r_unit="pc", y_unit=None)

r10 = [0.0004259313185670526, 0.001781979519906398, 0.008337973634367963, 0.028572018763353055, 0.08663723831370905, 0.26641438975941195, 0.753425512147508, 2.02128638582587, 6.8633020185882065, 12.101289048093445, 17.52303792588523]
fH2_10 = [0.0025798035219728433, 0.002726940442761194, 0.0022937804201509926, 0.0016096665374605208, 0.0010868115206115558, 0.0007558836102784575, 0.0006588162258881097, 0.00033378657622362126, 0.0001682927654365427, 0.00004720885828812877, 0.000015167069933237267]
add_profile_to(Latif2019_data, "halo1", 10.0, "fH2", r10, fH2_10, r_unit="pc", y_unit=None)

r50 = [0.0004259313185670526, 0.001311725896316336, 0.00489318823087793, 0.011438479588721824, 0.04835809915590955, 0.13980362541767202, 0.35205329310918504, 0.979337288155285, 4.064052301267865, 8.335248419978672, 17.52303792588523]
fH2_50 = [0.0025798035219728433, 0.0027142099607280925, 0.0021724150541818097, 0.001333503252025404, 0.000868494963459788, 0.0005773901284339241, 0.00035082845640770007, 0.0002489501603186649, 0.00016512883414599767, 0.000050407135944191675, 0.000015167069933237267]
add_profile_to(Latif2019_data, "halo1", 50.0, "fH2", r50, fH2_50, r_unit="pc", y_unit=None)

r100 = [0.00042, 0.0015, 0.00466, 0.02041, 0.05138, 0.15228, 0.81539, 2.40737, 5.34509, 8.9421, 12.9866, 16.54554]
fH2_100 = [0.00266, 0.00196, 0.00162, 0.0013, 0.00076, 0.00035, 0.0001, 0.00019, 0.00023, 0.00007, 0.00003, 0.00001]
add_profile_to(Latif2019_data, "halo1", 100.0, "fH2", r100, fH2_100, r_unit="pc", y_unit=None)

r1000 = [0.00042, 0.00156, 0.00536, 0.02264, 0.14541, 0.49829, 0.67808, 1.06397, 1.80078, 2.25608, 3.25278, 4.53198]
fH2_1000 = [0.00266, 0.00275, 0.00265, 0.00214, 0.00158, 0.00085, 0.00039, 0.00016, 0.00007, 0.00003, 0.00002, 0.00001]
add_profile_to(Latif2019_data, "halo1", 1000.0, "fH2", r1000, fH2_1000, r_unit="pc", y_unit=None)


#https://doi.org/10.1093/mnras/stu1230
# ------------------------------------------------------------
#                     Latif2014A data
# ------------------------------------------------------------
Latif2014A_haloA = np.array([[300.0, 1.41e7, 14.24],
                  [600.0, 1.42e7, 14.23],
                  [700.0, 1.43e7, 14.22]])
for j21, m_collapse, z_collapse in Latif2014A_haloA:
    set_scalar_in(Latif2014A_data, "haloA", j21, "M_collapse_Msun", m_collapse)
    set_scalar_in(Latif2014A_data, "haloA", j21, "z_collapse", z_collapse)
add_R200_for_all_LW(Latif2014A_data, "haloA", unit="au")
set_meta_in(Latif2014A_data, "haloA", 600.0, "formation_mode", "boundary")
set_meta_in(Latif2014A_data, "haloA", 700.0, "formation_mode", "DCBH")

Latif2014A_haloB = np.array([[600.0, 2.3e7, 12.98],
                    [900.0, 2.6e7, 12.84],
                    [1000.0, 2.4e7, 12.96],
                    [1500.0, 2.5e7, 12.97],
                    [2000.0, 2.4e7, 12.93]])
for j21, m_collapse, z_collapse in Latif2014A_haloB:
    set_scalar_in(Latif2014A_data, "haloB", j21, "M_collapse_Msun", m_collapse)
    set_scalar_in(Latif2014A_data, "haloB", j21, "z_collapse", z_collapse)
add_R200_for_all_LW(Latif2014A_data, "haloB", unit="au")
set_meta_in(Latif2014A_data, "haloB", 1500.0, "formation_mode", "boundary")
set_meta_in(Latif2014A_data, "haloB", 2000.0, "formation_mode", "DCBH")

Latif2014A_haloC = np.array([[600.0, 3.22e7, 11.20],
                    [700.0, 3.26e7, 11.11],
                    [900.0, 3.24e7, 11.13]])
for j21, m_collapse, z_collapse in Latif2014A_haloC:
    set_scalar_in(Latif2014A_data, "haloC", j21, "M_collapse_Msun", m_collapse)
    set_scalar_in(Latif2014A_data, "haloC", j21, "z_collapse", z_collapse)
add_R200_for_all_LW(Latif2014A_data, "haloC", unit="au")
set_meta_in(Latif2014A_data, "haloC", 700.0, "formation_mode", "boundary")
set_meta_in(Latif2014A_data, "haloC", 900.0, "formation_mode", "DCBH")

Latif2014A_haloD = np.array([[300.0, 4.06e7, 13.29],
                    [400.0, 4.08e7, 13.28],
                    [500.0, 4.08e7, 13.27],
                    [600.0, 4.1e7, 13.24]])
for j21, m_collapse, z_collapse in Latif2014A_haloD:
    set_scalar_in(Latif2014A_data, "haloD", j21, "M_collapse_Msun", m_collapse)
    set_scalar_in(Latif2014A_data, "haloD", j21, "z_collapse", z_collapse)
add_R200_for_all_LW(Latif2014A_data, "haloD", unit="au")
set_meta_in(Latif2014A_data, "haloD", 400.0, "formation_mode", "boundary")
set_meta_in(Latif2014A_data, "haloD", 500.0, "formation_mode", "DCBH")
set_meta_in(Latif2014A_data, "haloD", 600.0, "formation_mode", "DCBH")


Latif2014A_haloE = np.array([[300.0, 5.46e7, 10.60],
                    [500.0, 5.56e7, 10.549],
                    [600.0, 5.47e7, 10.59]])
for j21, m_collapse, z_collapse in Latif2014A_haloE:
    set_scalar_in(Latif2014A_data, "haloE", j21, "M_collapse_Msun", m_collapse)
    set_scalar_in(Latif2014A_data, "haloE", j21, "z_collapse", z_collapse)
add_R200_for_all_LW(Latif2014A_data, "haloE", unit="au")
set_meta_in(Latif2014A_data, "haloE", 500.0, "formation_mode", "boundary")
set_meta_in(Latif2014A_data, "haloE", 600.0, "formation_mode", "DCBH")


#halo A
#density profile
r300 = [1823.81329, 3349.14662, 6068.51902, 13709.81795, 37398.01281, 66109.59427, 126153.0301, 198282.45447, 471571.97241, 976863.25156, 1657871.52992]
rho300 = 1.0e-24 * np.array( [10274067.72607, 9509475.53927, 7106265.25189, 3414548.87383, 1877088.93001, 836030.69365, 511491.45626, 67165.53287, 25769.80375, 7058.9056, 1829.67409])
add_profile_to(Latif2014A_data, "haloA", 300.0, "density", r300, rho300, r_unit="au", y_unit="g/cm^3")

r600 = [1498.79641, 3282.98423, 6068.51902, 14720.64454, 37398.01281, 66109.59427, 126153.0301, 257755.73492, 445768.51756, 976863.25156, 1657871.52992]
rho600 = 1.0e-24 * np.array( [18398089.5026, 11129217.92246, 7106265.25189, 4814772.34728, 1877088.93001, 836030.69365, 511491.45626, 457460.43157, 75470.59567, 7058.9056, 1829.67409])
add_profile_to(Latif2014A_data, "haloA", 600.0, "density", r600, rho600, r_unit="au", y_unit="g/cm^3")

r700 = [1748.81337, 3245.52378, 6668.10595, 15801.8775, 36323.71824, 74347.35792, 118668.4393, 245822.15283, 471172.40656, 976863.25156, 1657871.52992]
rho700 = 1.0e-24 * np.array( [124581783.94658, 101641416.08213, 79156183.84078, 37398444.17544, 14340544.99783, 4333798.22, 1393772.5893, 322729.29097, 54321.87445, 7058.9056, 1829.67409])
add_profile_to(Latif2014A_data, "haloA", 700.0, "density", r700, rho700, r_unit="au", y_unit="g/cm^3")


#fH2 profile
r300 = [1962.53128, 3706.04325, 7203.54705, 20658.75252, 47569.16184, 82798.96624, 127366.00581, 187725.53331, 355100.82802, 578074.91599, 747222.43438, 1036556.02391, 1300109.1987, 1676597.01441]
fH2_300 = 1.0e-8 * np.array([121572.71898, 106856.61728, 106856.61728, 86436.98254, 89679.78935, 48576.38297, 35928.04529, 6922.44103, 1266.20432, 492.59345, 145.36466, 32.15821, 3.54555, 1.49986])
add_profile_to(Latif2014A_data, "haloA", 300.0, "fH2", r300, fH2_300, r_unit="au", y_unit=None)

r600 = [1659.13144, 3109.1484, 5911.16547, 13539.61925, 25039.9125, 49668.6129, 99947.97918, 188373.79172, 248226.19102, 322280.64984, 445243.40693, 498174.42695, 553424.14872, 629858.44875, 723077.36845, 927085.03957, 1575212.16906]
fH2_600 = 1.0e-8 * np.array([192165.62802, 168093.20358, 155144.91521, 159346.2139, 81447.47652, 17979.17441, 2938.24796, 679.61315, 110.95894, 11.53853, 2.04552, 13.1529, 92.92115, 13.51884, 1.32084, 0.73501, 0.76922])
add_profile_to(Latif2014A_data, "haloA", 600.0, "fH2", r600, fH2_600, r_unit="au", y_unit=None)

r700 = [2211.8938, 13362.89015, 42176.16509, 51084.02123, 60910.94643, 82091.1248, 108089.71118, 129327.76137, 220471.20853, 290238.67945, 332090.50736, 386986.00804, 490330.5686, 835781.19678, 1575212.16906, 4053.02648]
fH2_700 = 1.0e-8 * np.array([0.18607, 0.22251, 0.35622, 5.92336, 654.25053, 1839.28487, 1049.95293, 4232.2827, 2880.12559, 601.09784, 28.42246, 2.43262, 0.60743, 0.60933, 0.76922, 0.22776])
add_profile_to(Latif2014A_data, "haloA", 700.0, "fH2", r700, fH2_700, r_unit="au", y_unit=None)


#halo B
#density profile
r600 = [1241.63781, 2196.87314, 5411.83889, 16304.58767, 33745.04446, 59571.74765, 84496.43866, 155780.76466, 323957.99653, 607895.53491, 1095012.52594, 1673310.48732]
rho600 = 1.0e-24 * np.array( [18090583.48143, 15176955.78811, 8119638.8789, 5802062.43324, 2644704.05382, 826324.44401, 1026188.76396, 420304.78169, 186750.08487, 63884.31529, 14917.63004, 4375.07935])
add_profile_to(Latif2014A_data, "haloB", 600.0, "density", r600, rho600, r_unit="au", y_unit="g/cm^3")

r900 = [1241.63781, 2196.87314, 5411.83889, 15024.83079, 38083.77339, 63933.495, 112304.62672, 214160.79598, 323957.99653, 607895.53491, 1095012.52594, 1673310.48732]
rho900 = 1.0e-24 * np.array( [18090583.48143, 15176955.78811, 8119638.8789, 5329352.04373, 7486974.64052, 5069839.29056, 2625130.26021, 723545.31788, 186750.08487, 63884.31529, 14917.63004, 4375.07935])
add_profile_to(Latif2014A_data, "haloB", 900.0, "density", r900, rho900, r_unit="au", y_unit="g/cm^3")

r1000 = [1241.63781, 2196.87314, 5411.83889, 13904.44079, 34524.10324, 71719.33234, 124460.70966, 214160.79598, 388442.6236, 607895.53491, 1095012.52594, 1673310.48732]
rho1000 = 1.0e-24 * np.array( [18090583.48143, 15176955.78811, 8119638.8789, 3266862.49918, 2324025.05207, 1814981.12335, 1258214.85133, 723545.31788, 409578.42889, 63884.31529, 14917.63004, 4375.07935])
add_profile_to(Latif2014A_data, "haloB", 1000.0, "density", r1000, rho1000, r_unit="au", y_unit="g/cm^3")

r1500 = [1241.63781, 2196.87314, 4914.14166, 13904.44079, 34524.10324, 71719.33234, 123892.21842, 200785.18892, 325228.65019, 607895.53491, 1095012.52594, 1673310.48732]
rho1500 = 1.0e-24 * np.array( [18090583.48143, 15176955.78811, 5706313.90797, 3266862.49918, 2324025.05207, 1814981.12335, 865787.43536, 303567.85011, 155143.75131, 63884.31529, 14917.63004, 4375.07935])
add_profile_to(Latif2014A_data, "haloB", 1500.0, "density", r1500, rho1500, r_unit="au", y_unit="g/cm^3")

r2000 = [1294.29477, 2481.3083, 5435.95024, 13273.4232, 31662.66655, 70591.01455, 120607.38606, 203318.89076, 337159.50536, 546995.92891, 974391.05228, 1673310.48732]
rho2000 = 1.0e-24 * np.array( [157138785.20135, 138784494.28346, 86142495.20943, 79477682.12568, 17281404.76882, 5592169.58291, 2163415.90419, 934494.71293, 196718.12079, 47915.37595, 13576.60954, 4375.07935])
add_profile_to(Latif2014A_data, "haloB", 2000.0, "density", r2000, rho2000, r_unit="au", y_unit="g/cm^3")

#fH2 profile
r600 = [1282.53647, 2303.70769, 5387.43761, 13244.28595, 31341.46985, 59922.68674, 116522.13556, 168510.3177, 230096.97557, 335983.58104, 453294.51136, 512631.87809, 567046.69324, 801934.45071, 1265743.18957, 1841755.81338]
fH2_600 = 1.0e-8 * np.array([191197.00606, 200111.23834, 204022.03549, 156552.03673, 129955.52692, 31940.06519, 17955.16905, 3306.67409, 284.6609, 32.40907, 278.52118, 27.00878, 1.71848, 0.64072, 0.75354, 0.62201])
add_profile_to(Latif2014A_data, "haloB", 600.0, "fH2", r600, fH2_600, r_unit="au", y_unit=None)

r900 = [1282.53647, 2180.64029, 3944.67987, 8815.08107, 14484.60573, 19914.76083, 28925.89809, 33475.38877, 43391.08136, 68931.70992, 78809.4756, 421632.082, 866896.29585, 1265743.18957, 1841755.81338, 132771.39303, 159888.07805, 191502.69047, 276981.22162, 336583.44252, 547281.83327, 711785.58071]
fH2_900 = 1.0e-8 * np.array([191197.00606, 146531.41169, 106668.54932, 49206.82268, 13112.28418, 1424.95496, 212.36037, 7.2024, 0.65887, 1.35931, 11.79109, 59.97128, 4.63174, 0.75354, 0.62201, 2.62939, 114.28467, 33.46609, 32.3694, 3.47146, 361.11221, 27.48944])    
add_profile_to(Latif2014A_data, "haloB", 900.0, "fH2", r900, fH2_900, r_unit="au", y_unit=None)

r1000 = [1224.97871, 2065.92092, 4001.63988, 7504.67268, 13023.02879, 21267.86915, 37461.80468, 57052.26151, 71166.80273, 526359.59959, 795391.63636, 996438.76158, 1841755.81338, 109563.82076, 168254.45547, 212840.33882, 336583.44252, 586129.64527, 682406.99342]
fH2_1000 = 1.0e-8 * np.array([107508.1002, 117910.90464, 72112.28494, 21215.2361, 11637.55037, 3947.46749, 2047.7318, 421.89672, 21.65901, 32.67216, 4.85007, 0.7806, 0.62201, 1.0382, 1.66094, 5.79421, 3.47146, 307.19787, 30.44631])
add_profile_to(Latif2014A_data, "haloB", 1000.0, "fH2", r1000, fH2_1000, r_unit="au", y_unit=None)

r1500 = [1224.97871, 2065.92092, 4001.63988, 7765.43338, 14346.51074, 23650.07815, 42078.3336, 63287.77798, 97523.94359, 470721.23476, 770818.54639, 1700593.00098, 125305.46616, 173045.70342, 221651.6876, 282339.15253, 359049.11674]
fH2_1500 = 1.0e-8 * np.array([107508.1002, 117910.90464, 72112.28494, 43363.36191, 31427.75805, 16307.00916, 9378.28035, 2112.44724, 376.10107, 0.64799, 0.45391, 0.47682, 63.83741, 314.58572, 17.65203, 0.72885, 2.42279])
add_profile_to(Latif2014A_data, "haloB", 1500.0, "fH2", r1500, fH2_1500, r_unit="au", y_unit=None)

r2000 = [1565.74347, 2421.69133, 4666.64853, 12043.9503, 19635.18208, 27573.05586, 45315.97671, 64184.67074, 460387.1166, 770818.54639, 1700593.00098, 80647.71492, 98997.54326, 209977.13735, 267892.58411, 341285.73865, 131019.92614, 167025.09328]
fH2_2000 = 1.0e-8 * np.array([0.17178, 0.17975, 0.19801, 0.24765, 0.27869, 3.00572, 0.47333, 0.92098, 0.41538, 0.45391, 0.47682, 25.34201, 38.77496, 2.3092, 3.80084, 1.61797, 4.8727, 107.73221])
add_profile_to(Latif2014A_data, "haloB", 2000.0, "fH2", r2000, fH2_2000, r_unit="au", y_unit=None)


#halo C
#density profile
r600 = [2542.55431, 4746.46364, 13688.10271, 28612.67617, 59943.13524, 134403.4157, 342298.38993, 824165.08165, 1592134.62844]
rho600 = 1.0e-24*np.array([8843574.48578, 9069980.86112, 2229566.84953, 1618864.97898, 941938.67106, 224323.58262, 136026.55174, 110214.56785, 5619.66043])
add_profile_to(Latif2014A_data, "haloC", 600.0, "density", r600, rho600, r_unit="au", y_unit="g/cm^3")

r700 = [2542.55431, 4746.46364, 12381.72107, 28442.75421, 59943.13524, 162858.24379, 342298.38993, 700170.83195, 1578913.08681]
rho700 = 1.0e-24*np.array([8843574.48578, 9069980.86112, 5689115.00439, 3252969.40276, 941938.67106, 455437.16983, 136026.55174, 16789.36021, 3526.16835])
add_profile_to(Latif2014A_data, "haloC", 700.0, "density", r700, rho700, r_unit="au", y_unit="g/cm^3")

r900 = [1181.49334, 3727.76289, 12347.35197, 32191.65082, 70028.2054, 162858.24379, 328476.25735, 700170.83195, 1452819.19196]
rho900 = 1.0e-24*np.array([123757110.86058, 123449055.51131, 53795068.9343, 16268579.64927, 3608082.83206, 455437.16983, 92011.68879, 16789.36021, 3094.24611])
add_profile_to(Latif2014A_data, "haloC", 900.0, "density", r900, rho900, r_unit="au", y_unit="g/cm^3")

#fH2 profile
r600 = [2441.73481, 5653.34729, 20271.17193, 56178.04275, 104338.67632, 207294.09067, 363614.11389, 454188.33432, 589486.16233, 713010.91658, 895394.50212, 1276209.34212, 1715322.3478]
fH2_600 = 1.0e-8*np.array([179908.04579, 173325.72118, 119536.68408, 63451.36697, 5015.02387, 379.73137, 34.36759, 1.25321, 12.57762, 467.09737, 57.16395, 8.17844, 0.76807])
add_profile_to(Latif2014A_data, "haloC", 600.0, "fH2", r600, fH2_600, r_unit="au", y_unit=None)

r700 = [2441.73481, 5653.34729, 17149.11572, 39323.63263, 60992.77787, 101869.41801, 136701.79529, 166765.669, 323014.97847, 611976.32757, 1049317.7289, 1666858.06259]
fH2_700 = 1.0e-8*np.array([179908.04579, 173325.72118, 90464.8455, 49271.61029, 4548.59204, 944.43622, 43.7246, 0.68844, 0.47974, 0.51564, 0.46191, 0.55015])
add_profile_to(Latif2014A_data, "haloC", 700.0, "fH2", r700, fH2_700, r_unit="au", y_unit=None)

r900 = [1163.97994, 2611.51204, 6236.15836, 15796.63536, 37685.44394, 75501.53113, 120059.93392, 274599.98312, 370559.46914, 507614.00632, 1049317.7289, 1666858.06259]
fH2_900 = 1.0e-8*np.array([0.15246, 0.18738, 0.21204, 0.21571, 0.28911, 0.83613, 0.61125, 0.53745, 5.09766, 0.45191, 0.46191, 0.55015])
add_profile_to(Latif2014A_data, "haloC", 900.0, "fH2", r900, fH2_900, r_unit="au", y_unit=None)

#halo D
r300 = [1323.4162, 2388.94076, 6798.25433, 17244.02022, 28809.29906, 71442.46172, 171693.39305, 404895.93117, 870955.7146, 1655644.95424]
rho300 = 1.0e-24*np.array([23625106.89226, 18776427.93487, 7184023.97761, 3700722.87313, 2786590.91114, 2358388.59879, 308776.83513, 78479.32611, 15630.73311, 4109.52374])
add_profile_to(Latif2014A_data, "haloD", 300.0, "density", r300, rho300, r_unit="au", y_unit="g/cm^3")

r400 = [1323.4162, 2388.94076, 6798.25433, 15902.04487, 32937.52395, 71236.04245, 229016.3472, 415728.819, 870955.7146, 1655644.95424]
rho400 = 1.0e-24*np.array([23625106.89226, 18776427.93487, 7184023.97761, 2153084.53534, 897986.76856, 485697.67326, 404326.67653, 106431.35694, 15630.73311, 4109.52374])
add_profile_to(Latif2014A_data, "haloD", 400.0, "density", r400, rho400, r_unit="au", y_unit="g/cm^3")

r500 = [1305.11545, 2774.82638, 7979.63661, 19121.57494, 37009.17844, 80871.40956, 229016.3472, 415728.819, 870955.7146, 1655644.95424]
rho500 = 1.0e-24*np.array([131191119.97717, 104182216.83552, 76728057.48734, 49952704.97515, 18715990.80072, 4440124.36379, 404326.67653, 106431.35694, 15630.73311, 4109.52374])
add_profile_to(Latif2014A_data, "haloD", 500.0, "density", r500, rho500, r_unit="au", y_unit="g/cm^3")

r600 = [1305.11545, 2774.82638, 7860.75685, 17772.74726, 37009.17844, 80871.40956, 229016.3472, 415728.819, 870955.7146, 1655644.95424]
rho600 = 1.0e-24*np.array([131191119.97717, 104182216.83552, 35250688.98514, 29132894.8651, 18715990.80072, 4440124.36379, 404326.67653, 106431.35694, 15630.73311, 4109.52374])
add_profile_to(Latif2014A_data, "haloD", 600.0, "density", r600, rho600, r_unit="au", y_unit="g/cm^3")

#fH2 profile
r300 = [1228.00732, 3391.10832, 11416.82143, 38820.72703, 104581.85032, 163349.31828, 317444.00103, 545100.62487, 857814.69265, 1061137.78822, 1353223.0775, 1698030.45488]
fH2_300 = 1.0e-8*np.array([193826.42834, 188528.50782, 179139.04524, 126583.81788, 103119.5638, 23642.58154, 4850.20238, 1002.34004, 217.56399, 20.24928, 2.98778, 1.52509])
add_profile_to(Latif2014A_data, "haloD", 300.0, "fH2", r300, fH2_300, r_unit="au", y_unit=None)

r400 = [1228.00732, 3391.10832, 9655.61934, 25507.07458, 41786.23331, 82253.2713, 165353.3118, 300291.37249, 568739.13536, 733059.87765, 978202.44758, 1720104.60367]
fH2_400 = 1.0e-8*np.array([193826.42834, 188528.50782, 111499.72132, 46565.94764, 16195.58918, 8089.42464, 1123.59306, 458.86817, 202.62804, 26.15974, 2.01145, 1.46715])
add_profile_to(Latif2014A_data, "haloD", 400.0, "fH2", r400, fH2_400, r_unit="au", y_unit=None)

r500 = [1643.11154, 3918.35689, 14200.91481, 32959.8578, 44581.90197, 65432.35787, 97617.24277, 137913.55421, 311930.03372, 458395.49463, 750614.20866, 1065940.8432, 1749562.37962]
fH2_500 = 1.0e-8*np.array([0.2959, 0.24882, 0.46737, 0.6612, 5.48251, 0.48876, 1.72852, 0.61725, 1.39315, 107.8022, 8.11648, 0.85362, 1.08778])
add_profile_to(Latif2014A_data, "haloD", 500.0, "fH2", r500, fH2_500, r_unit="au", y_unit=None)

r600 = [1643.11154, 3918.35689, 9760.84262, 19165.00443, 57053.99232, 70050.06515, 94810.49018, 143920.22767, 216953.59243, 342620.60546, 588758.03263, 1530644.30233, 472605.62032]
fH2_600 = 1.0e-8*np.array([0.2959, 0.24882, 0.42651, 0.38624, 0.57622, 7.04503, 396.96562, 922.3743, 186.77412, 2.70751, 0.88674, 0.9897, 3.8676])
add_profile_to(Latif2014A_data, "haloD", 600.0, "fH2", r600, fH2_600, r_unit="au", y_unit=None)

#halo E
r300 = [1187.46445, 2144.28275, 4974.93055, 12455.57221, 34158.65681, 79657.0997, 130384.99945, 314639.08, 618283.78904, 851394.46324, 1123926.29928, 1594316.6011]
rho300 = 1.0e-24*np.array([13649917.96989, 11726461.46606, 11726461.46606, 4167391.52855, 3395536.51832, 1130179.38246, 162585.49373, 106171.58296, 141628.16945, 223959.56707, 49638.20374, 5420.9404])
add_profile_to(Latif2014A_data, "haloE", 300.0, "density", r300, rho300, r_unit="au", y_unit="g/cm^3")

r500 = [1187.46445, 2144.28275, 4974.93055, 12455.57221, 27163.93446, 62406.18433, 134521.34744, 264954.3869, 501537.60996, 846647.77897, 1594316.6011]
rho500 = 1.0e-24*np.array([13649917.96989, 11726461.46606, 11726461.46606, 4167391.52855, 2633100.25661, 1096839.88377, 326972.98596, 147909.55508, 69241.96644, 25125.4055, 5420.9404])
add_profile_to(Latif2014A_data, "haloE", 500.0, "density", r500, rho500, r_unit="au", y_unit="g/cm^3")

r600 = [1167.60141, 2347.19651, 5475.18432, 13361.02801, 27048.96839, 60568.96197, 137007.75801, 272807.03972, 501537.60996, 846647.77897, 1594316.6011]
rho600 = 1.0e-24*np.array([152273189.722, 118543740.83519, 107143560.93757, 54374326.88026, 17276947.69582, 4786134.76154, 716569.30087, 211215.95659, 69241.96644, 25125.4055, 5420.9404])
add_profile_to(Latif2014A_data, "haloE", 600.0, "density", r600, rho600, r_unit="au", y_unit="g/cm^3")

#fH2 profile
r300 = [1302.93304, 3938.35878, 12898.85267, 44505.71363, 85467.23311, 171579.80571, 330767.75239, 546529.63935, 969836.96864, 1271017.16854, 1550544.2246, 1770269.21976]
fH2_300 = 1.0e-8*np.array([162987.44009, 162987.44009, 138128.99067, 91182.83142, 55819.86441, 12615.2664, 7241.55078, 1977.91955, 771.24087, 81.84577, 3.10724, 1.50999])  
add_profile_to(Latif2014A_data, "haloE", 300.0, "fH2", r300, fH2_300, r_unit="au", y_unit=None)

r500 = [1302.93304, 3938.35878, 12898.85267, 35317.2625, 72273.20403, 112278.86754, 193289.05249, 271765.47952, 401225.0669, 584646.33877, 896448.52742, 1259562.13493, 1791020.23058]
fH2_500 = 1.0e-8*np.array([162987.44009, 162987.44009, 138128.99067, 81706.93429, 31105.71828, 10312.1536, 5403.83505, 1175.86064, 141.21148, 67.57647, 6.64329, 1.24317, 1.17702])
add_profile_to(Latif2014A_data, "haloE", 500.0, "fH2", r500, fH2_500, r_unit="au", y_unit=None)

r600 = [1222.68813, 3276.28899, 10953.91011, 30900.94537, 88952.51138, 218459.27621, 450425.88441, 608487.70003, 739739.38343, 1096024.19175, 1673124.20254]
fH2_600 = 1.0e-8*np.array([0.2176, 0.17947, 0.18421, 0.36668, 0.44809, 0.54368, 0.47958, 4.85916, 1.60803, 1.11518, 0.73275])
add_profile_to(Latif2014A_data, "haloE", 600.0, "fH2", r600, fH2_600, r_unit="au", y_unit=None)

# ------------------------------------------------------------
#                     Latif2021 data
# https://doi.org/10.1093/mnras/stab2708
# ------------------------------------------------------------

Latif2021_halo1 = np.array([100.0, 7.5e6, 16.5])
set_scalar_in(Latif2021_data, "halo1", 100.0, "M_collapse_Msun", 7.5e6)
set_scalar_in(Latif2021_data, "halo1", 100.0, "z_collapse", 16.5)
add_R200_for_all_LW(Latif2021_data, "halo1", unit="pc")

Latif2021_halo2 = np.array([500.0, 1.7e7, 14.5])
set_scalar_in(Latif2021_data, "halo2", 500.0, "M_collapse_Msun", 1.7e7)
set_scalar_in(Latif2021_data, "halo2", 500.0, "z_collapse", 14.5)
add_R200_for_all_LW(Latif2021_data, "halo2", unit="pc")

Latif2021_halo3 = np.array([100.0, 1.5e6, 22.8])
set_scalar_in(Latif2021_data, "halo3", 100.0, "M_collapse_Msun", 1.5e6)
set_scalar_in(Latif2021_data, "halo3", 100.0, "z_collapse", 22.8)
add_R200_for_all_LW(Latif2021_data, "halo3", unit="pc")

Latif2021_halo4 = np.array([500.0, 5.4e6, 18.5])
set_scalar_in(Latif2021_data, "halo4", 500.0, "M_collapse_Msun", 5.4e6)
set_scalar_in(Latif2021_data, "halo4", 500.0, "z_collapse", 18.5)
add_R200_for_all_LW(Latif2021_data, "halo4", unit="pc")

Latif2021_halo5 = np.array([100.0, 1.3e7, 13.3])
set_scalar_in(Latif2021_data, "halo5", 100.0, "M_collapse_Msun", 1.3e7)
set_scalar_in(Latif2021_data, "halo5", 100.0, "z_collapse", 13.3)
add_R200_for_all_LW(Latif2021_data, "halo5", unit="pc")

Latif2021_halo6 = np.array([500.0, 1.7e7, 13.31])
set_scalar_in(Latif2021_data, "halo6", 500.0, "M_collapse_Msun", 1.7e7)
set_scalar_in(Latif2021_data, "halo6", 500.0, "z_collapse", 13.31)
add_R200_for_all_LW(Latif2021_data, "halo6", unit="pc")

#halo1
r = [0.00281, 0.00563, 0.01351, 0.05068, 0.14587, 0.39416, 1.55556, 4.52684, 11.4988, 20.47375, 65.86484, 144.72404]
rho = 1.0e-22 * np.array([418993.32908, 437165.47875, 323265.55736, 132570.35194, 24299.74143, 1567.63233, 81.4856, 10.93242, 2.59789, 0.43783, 0.06956, 0.02399])
add_profile_to(Latif2021_data, "halo1", 100.0, "density", r, rho, r_unit="pc", y_unit="g/cm^3")

r = [0.00303, 0.0086, 0.02758, 0.08376, 0.47317, 2.10846, 5.47775, 10.32134, 12.91992]
fH2 = [0.00136, 0.00132, 0.00124, 0.00099, 0.00072, 0.00043, 0.00029, 0.00014, 0.0001]
add_profile_to(Latif2021_data, "halo1", 100.0, "fH2", r, fH2, r_unit="pc", y_unit=None)

#halo2
r = [0.0032, 0.00594, 0.01351, 0.05068, 0.14587, 0.39178, 1.27059, 3.1449, 24.25116, 60.14012, 144.72404, 6.03497, 9.57154, 83.63833]
rho = 1.0e-22 * np.array([332391.89037, 334713.45103, 323265.55736, 132570.35194, 24299.74143, 2205.77033, 574.46485, 113.30741, 1.10902, 0.85227, 0.02399, 42.14306, 6.73337, 0.16979])
add_profile_to(Latif2021_data, "halo2", 500.0, "density", r, rho, r_unit="pc", y_unit="g/cm^3")

r = [0.00376, 0.00969, 0.02807, 0.09365, 0.38188, 1.39553, 4.4054, 7.49842, 12.91992]
fH2 = [0.0018, 0.00172, 0.0015, 0.00133, 0.00108, 0.00078, 0.00053, 0.00025, 0.0001]
add_profile_to(Latif2021_data, "halo2", 500.0, "fH2", r, fH2, r_unit="pc", y_unit=None)

#halo3
r = [0.00338, 0.00677, 0.0177, 0.04894, 0.14876, 0.40966, 0.87107, 2.45956, 22.54923, 40.0257, 91.68744, 5.61741, 9.80619, 65.38385]
rho = 1.0e-22 * np.array([823216.83767, 779716.67944, 811083.78569, 387482.05402, 46378.21323, 4400.65649, 344.90236, 62.49043, 0.64666, 0.14034, 0.02482, 21.98873, 3.40016, 0.05225])
add_profile_to(Latif2021_data, "halo3", 100.0, "density", r, rho, r_unit="pc", y_unit="g/cm^3")

r = [0.00356, 0.00938, 0.02807, 0.09099, 0.35166, 1.13131, 3.8761, 7.49842, 14.90892]
fH2 = [0.00167, 0.00163, 0.0015, 0.00118, 0.00087, 0.0006, 0.00041, 0.00025, 0.00012]
add_profile_to(Latif2021_data, "halo3", 100.0, "fH2", r, fH2, r_unit="pc", y_unit=None)

#halo4
r = [0.00327, 0.00697, 0.01503, 0.03673, 0.09886, 0.27392, 0.87107, 2.45956, 21.65026, 36.25297, 136.49657, 6.02728, 14.28416, 61.28155]
rho = 1.0e-22 * np.array([383368.75615, 393369.67466, 363026.67464, 248946.31116, 26880.13663, 3040.24715, 344.90236, 62.49043, 3.0809, 0.50392, 0.02539, 24.90041, 18.1246, 0.12036])
add_profile_to(Latif2021_data, "halo4", 500.0, "density", r, rho, r_unit="pc", y_unit="g/cm^3")

r = [0.00321, 0.01488, 0.06264, 0.30127, 1.13131, 3.88105, 8.90266, 15.82941, 19.7643]
fH2 = [0.00157, 0.0015, 0.00115, 0.00078, 0.0006, 0.00046, 0.00035, 0.00021, 0.00011]
add_profile_to(Latif2021_data, "halo4", 500.0, "fH2", r, fH2, r_unit="pc", y_unit=None)

#halo5
r = [0.0033, 0.00922, 0.01981, 0.07387, 0.18001, 0.47671, 1.21231, 2.84817, 32.10125, 51.18957, 147.64324, 8.02762, 15.42441, 93.67605]
rho = 1.0e-22 * np.array([195849.15895, 174438.91083, 183488.41751, 74276.79743, 18190.95133, 3428.48015, 646.4715, 177.51106, 17.77893, 5.93912, 0.0457, 147.9552, 24.127, 0.98161])
add_profile_to(Latif2021_data, "halo5", 100.0, "density", r, rho, r_unit="pc", y_unit="g/cm^3")

r = [0.00346, 0.01439, 0.07319, 0.33829, 1.44455, 5.09604, 12.33913, 29.65563, 47.91164, 75.15364]
fH2 = [0.00171, 0.00167, 0.00151, 0.00131, 0.00116, 0.00102, 0.00073, 0.00054, 0.00032, 0.00012]
add_profile_to(Latif2021_data, "halo5", 100.0, "fH2", r, fH2, r_unit="pc", y_unit=None)

#halo6
r = [0.00509, 0.01313, 0.07387, 0.16967, 0.32154, 0.7472, 2.04254, 24.65899, 43.53411, 147.64324, 5.03042, 11.5355, 93.67605, 0.02862]
rho = 1.0e-22 * np.array([3.89967, 3.86164, 3.37945, 2.83843, 2.39588, 1.92074, 1.59876, 1.48569, 1.21723, 0.71532, 1.39765, 1.50467, 0.99799, 3.64684])
add_profile_to(Latif2021_data, "halo6", 500.0, "density", r, rho, r_unit="pc", y_unit="g/cm^3")

x = [0.00421, 0.01249, 0.05401, 0.18149, 0.52475, 1.23126, 3.26333, 8.56864, 18.08485, 38.07647, 53.21891]
fH2 = [0.00125, 0.0012, 0.00103, 0.00075, 0.00052, 0.00044, 0.00025, 0.00026, 0.00031, 0.00018, 0.00011]
add_profile_to(Latif2021_data, "halo6", 500.0, "fH2", x, fH2, r_unit="pc", y_unit=None)

# ------------------------------------------------------------
#                      Latif2015_2e4K   data
#  https://doi.org/10.1093/mnras/stu2244 (Table 2 & Figure 5)
# ------------------------------------------------------------
Latif2015_2e4K_haloA = np.array([20000.0, 5.6e7, 10.59])
set_scalar_in(Latif2015_2e4K_data, "haloA", 20000.0, "M_collapse_Msun", 5.6e7)
set_scalar_in(Latif2015_2e4K_data, "haloA", 20000.0, "z_collapse", 10.59)
#temporarily use the same M_collapse and z_collapse for other J21 values
set_scalar_in(Latif2015_2e4K_data, "haloA", 10000.0, "M_collapse_Msun", 5.6e7)
set_scalar_in(Latif2015_2e4K_data, "haloA", 10000.0, "z_collapse", 10.59)

add_R200_for_all_LW(Latif2015_2e4K_data, "haloA", unit="au")
set_meta_in(Latif2015_2e4K_data, "haloA", 20000.0, "formation_mode", "boundary")

Latif2015_2e4K_haloB = np.array([40000.0, 4.06e7, 13.23])
set_scalar_in(Latif2015_2e4K_data, "haloB", 40000.0, "M_collapse_Msun", 4.06e7)
set_scalar_in(Latif2015_2e4K_data, "haloB", 40000.0, "z_collapse", 13.23)
#temporarily use the same M_collapse and z_collapse for other J21 values
set_scalar_in(Latif2015_2e4K_data, "haloB", 30000.0, "M_collapse_Msun", 4.06e7)
set_scalar_in(Latif2015_2e4K_data, "haloB", 30000.0, "z_collapse", 13.23)

add_R200_for_all_LW(Latif2015_2e4K_data, "haloB", unit="au")
set_meta_in(Latif2015_2e4K_data, "haloB", 40000.0, "formation_mode", "boundary")

Latif2015_2e4K_haloC = np.array([50000.0, 3.25e7, 11.13])
set_scalar_in(Latif2015_2e4K_data, "haloC", 50000.0, "M_collapse_Msun", 3.25e7)
set_scalar_in(Latif2015_2e4K_data, "haloC", 50000.0, "z_collapse", 11.13)
#temporarily use the same M_collapse and z_collapse for other J21 values
set_scalar_in(Latif2015_2e4K_data, "haloC", 40000.0, "M_collapse_Msun", 3.25e7)
set_scalar_in(Latif2015_2e4K_data, "haloC", 40000.0, "z_collapse", 11.13)
add_R200_for_all_LW(Latif2015_2e4K_data, "haloC", unit="au")
set_meta_in(Latif2015_2e4K_data, "haloC", 50000.0, "formation_mode", "boundary")

#profiles for haloA
r20000 = [1096.32742, 1986.43031, 3763.2164, 7982.60955, 16783.51778, 33861.32634, 75150.10554, 174269.30205, 346975.80591, 714153.54851, 1252391.92565, 1755529.26728]
rho20000 = 1.0e-24 * np.array([16908211.1583, 13840160.96573, 9579198.11282, 5495970.49071, 3302681.49266, 1333772.02257, 455176.59116, 381882.49897, 138985.3599, 46780.12368, 9371.25779, 2268.77053])
add_profile_to(Latif2015_2e4K_data, "haloA", 20000.0, "density", r20000, rho20000, r_unit="au", y_unit="g/cm^3")

r20000 = [1217.94089, 2468.61564, 6401.12668, 19281.2546, 36870.09681, 63901.98194, 115464.91797, 206696.34665, 341009.35834, 566682.00563, 893820.15345, 1688197.37961]
fH2_20000 = 1.0e-8 * np.array([86379.2523, 89427.63759, 73735.11415, 55218.46476, 26982.32005, 3924.11488, 923.80311, 133.11012, 5.47083, 0.9598, 0.81451, 0.40845])
add_profile_to(Latif2015_2e4K_data, "haloA", 20000.0, "fH2", r20000, fH2_20000, r_unit="au", y_unit=None)


r10000 = [1213.61851, 2640.0549, 5549.60304, 12455.40983, 26362.30279, 41901.65009, 94739.81659, 224556.20129, 509868.3727, 845321.51369, 1399999.46282, 1825836.35844]
rho10000 =  1.0e-24* np.array([11765878.5255, 6858566.71447, 5727069.40509, 2709929.76295, 2600435.33929, 994711.25451, 425816.12992, 189623.21456, 64054.65041, 19403.09606, 4759.75328, 2149.78529])
add_profile_to(Latif2015_2e4K_data, "haloA", 10000.0, "density", r10000, rho10000, r_unit="au", y_unit="g/cm^3")

r10000 = [1258.32773, 2699.68452, 7243.2512, 15328.33413, 32639.90261, 59807.13231, 109832.52824, 219034.88575, 338903.16031, 446660.02433, 589067.39654, 773197.71004, 944110.68925, 1361246.43465, 1760076.81594]
fH2_10000 = 1.0e-8* np.array([152425.14605, 162055.46699, 170362.91137, 103744.2989, 54832.47995, 19313.73757, 8276.32197, 2234.00796, 2069.56513, 369.74408, 62.46802, 10.26317, 1.43648, 0.36596, 0.29569])   
add_profile_to(Latif2015_2e4K_data, "haloA", 10000.0, "fH2", r10000, fH2_10000, r_unit="au", y_unit=None)

#profiles for haloB
r40000 = [1189.06003, 2156.14997, 4775.54579, 12436.64359, 41942.68053, 112298.99636, 222029.02245, 360304.14546, 691144.90689, 1083124.59622, 1846330.79569]
rho40000 = 1.0e-24 * np.array([27066411.31653, 14001621.17421, 9463186.62632, 3869906.74758, 2937328.13012, 1732155.6758, 521188.24268, 149314.57912, 32507.32981, 8019.543, 2408.67407])
add_profile_to(Latif2015_2e4K_data, "haloB", 40000.0, "density", r40000, rho40000, r_unit="au", y_unit="g/cm^3")

r40000 = [1143.94443, 2583.0467, 7277.0816, 12834.02805, 22257.63187, 30991.98444, 34818.88991, 39977.06175, 45099.31245, 61015.98204, 71127.09318, 82308.45949, 158903.68327, 425742.98628, 776070.82409, 1281011.44507, 1773518.25068]
fH2_40000 = 1.0e-8 * np.array([256571.80105, 182682.35586, 108372.12947, 34811.78364, 2370.10828, 140.96195, 13.65107, 51.05621, 225.52931, 59.83152, 5.44069, 0.70407, 0.34277, 0.5554, 0.63704, 0.20553, 0.11167])
add_profile_to(Latif2015_2e4K_data, "haloB", 40000.0, "fH2", r40000, fH2_40000, r_unit="au", y_unit=None)

r30000 = [1134.30928, 2066.93907, 4309.2271, 7970.98338, 13242.8419, 22307.57546, 49312.91152, 89127.7332, 152144.85858, 311815.77468, 576325.23814, 1016855.92706, 1783054.6393]
rho30000 = 1.0e-24 * np.array([19553782.90317, 14165547.74028, 14523854.19595, 8433302.43596, 4885176.72149, 3130931.10737, 2370228.048, 2491650.64484, 1141827.27612, 185125.98825, 36610.51495, 9201.06938, 1678.21752])
add_profile_to(Latif2015_2e4K_data, "haloB", 30000.0, "density", r30000, rho30000, r_unit="au", y_unit="g/cm^3")

r30000 = [1075.12924, 1898.79826, 3744.3758, 6602.46544, 11691.67387, 17301.62946, 32389.21788, 50569.58261, 85565.00267, 118745.80216, 180831.69814, 238016.00714, 284024.87766, 307518.27551, 349568.36504, 412353.20535, 636760.03726, 772553.47588, 1142940.50563, 1710306.87729]
fH2_30000 = 1.0e-8 * np.array([185825.86626, 175317.80034, 119007.65866, 74337.73164, 62334.9379, 24227.06545, 15148.16695, 7456.53471, 3863.8479, 3863.8479, 2128.42222, 546.36066, 147.28038, 22.33485, 4.54016, 1.19489, 0.96823, 0.83895, 0.28981, 0.1314])
add_profile_to(Latif2015_2e4K_data, "haloB", 30000.0, "fH2", r30000, fH2_30000, r_unit="au", y_unit=None)   

#profiles for haloC
r50000 = [1145.30589, 2321.46004, 5290.32625, 11271.26509, 38142.10854, 83430.17401, 168348.9076, 291278.3967, 499790.80477, 800899.06511, 1300499.37432, 1740993.32333]
rho50000 = 1.0e-24 * np.array([11560612.16994, 12261349.47558, 6815307.58462, 3079356.94959, 3223146.81873, 3516370.81483, 824681.68124, 212403.31901, 57536.3922, 17500.74195, 5406.93117, 1748.49855])
add_profile_to(Latif2015_2e4K_data, "haloC", 50000.0, "density", r50000, rho50000, r_unit="au", y_unit="g/cm^3")

r50000 = [1128.97129, 2383.79666, 4812.31396, 8526.47359, 16230.43249, 31554.98223, 51181.29201, 75344.94442, 117708.51506, 143516.40459, 276163.00846, 433552.30367, 789251.27386, 1174212.68155, 1608107.45381]
fH2_50000 = 1.0e-8 * np.array([116108.80363, 90923.09204, 47078.67092, 11150.3836, 2585.03456, 1003.28664, 439.06535, 81.15701, 4.64874, 0.6654, 0.3474, 0.4195, 0.33577, 0.13404, 0.05419])
add_profile_to(Latif2015_2e4K_data, "haloC", 50000.0, "fH2", r50000, fH2_50000, r_unit="au", y_unit=None)

r40000 = [1146.81878, 2886.99953, 6977.16857, 15438.52024, 25789.67912, 46332.20403, 82254.37131, 127914.15306, 227148.20833, 459635.56449, 790023.98881, 1718351.33602]
rho40000 = 1.0e-24 * np.array([17819303.18276, 17819303.18276, 8934937.79568, 5429105.11534, 1909911.08886, 1961884.54918, 3118946.34072, 1449775.54878, 239487.88001, 71160.3588, 11988.69142, 1779.80524])
add_profile_to(Latif2015_2e4K_data, "haloC", 40000.0, "density", r40000, rho40000, r_unit="au", y_unit="g/cm^3")

r40000 = [1065.69958, 2120.09411, 4489.14787, 8720.31135, 14656.7885, 24491.48378, 31914.11063, 45264.57501, 74355.92836, 98078.63363, 107676.46181, 108679.25611, 134434.84846, 156362.90008, 188612.96024, 207812.05666, 273351.70235, 484561.23777, 783022.53879, 1092058.40636, 1637266.35961]
fH2_40000 = [104543.25395, 88035.22703, 67204.15091, 50138.30354, 25472.08301, 9244.02048, 2494.28781, 1273.39116, 1720.20815, 950.02573, 164.9473, 29.73599, 3.13614, 22.26078, 11.48176, 1.76617, 0.64946, 0.73163, 0.31871, 0.1749, 0.09061]
add_profile_to(Latif2015_2e4K_data, "haloC", 40000.0, "fH2", r40000, fH2_40000, r_unit="au", y_unit=None)

# ------------------------------------------------------------
#                      Wise2019 data
#  https://www.nature.com/articles/s41586-019-0873-4
# ------------------------------------------------------------
Wise2019_MMH = np.array([3.0, 2.6e7, 16.4])
set_scalar_in(Wise2019_data, "MMH", 3.0, "M_collapse_Msun", 2.6e7)
set_scalar_in(Wise2019_data, "MMH", 3.0, "z_collapse", 16.4)
add_R200_for_all_LW(Wise2019_data, "MMH", unit="pc")
set_meta_in(Wise2019_data, "MMH", 3.0, "formation_mode", "DCBH")


Wise2019_LWH = np.array([3.0, 5.8e7, 15.3])
set_scalar_in(Wise2019_data, "LWH", 3.0, "M_collapse_Msun", 5.8e7)
set_scalar_in(Wise2019_data, "LWH", 3.0, "z_collapse", 15.3)
add_R200_for_all_LW(Wise2019_data, "LWH", unit="pc")
set_meta_in(Wise2019_data, "LWH", 3.0, "formation_mode", "DCBH")

#fH2 vs enclosed gas mass profile
Mgas_MMH = [1.26344, 2.45052, 5.92587, 13.43197, 34.93614, 97.88215, 261.59906, 640.57113, 1637.77655, 3240.01423, 6857.12743, 11721.68073, 19480.73354, 37248.61632, 67896.49283, 128996.97817, 179381.81173, 267225.76554, 382551.5867, 509805.58445, 702217.54399, 1007539.15625, 1583544.65322, 3119422.17158]
fH2_MMH = 1.0e-6*np.array([2726.22031, 2584.33755, 2665.83037, 2665.83037, 2714.81614, 2435.12085, 2386.80054, 1812.53828, 1495.83717, 1600.23372, 2009.63715, 1498.3867, 1428.80287, 923.56377, 392.81972, 198.43494, 63.29276, 28.69746, 12.63044, 5.16103, 3.18695, 1.90605, 1.36961, 0.76179])
add_profile_to(Wise2019_data, "MMH", 3.0, "fH2_vs_Mgas", Mgas_MMH, fH2_MMH, r_unit="Msun", y_unit=None)

Mgas_LWH = [1.19663, 3.70347, 12.48817, 34.50154, 95.70127, 307.44522, 906.2931, 2582.47742, 7333.92599, 22169.9607, 59043.94721, 119095.21516, 244990.15667, 481760.68763, 897037.70728, 1223134.38794, 1714559.02653, 2615008.40477, 3600167.55698]
fH2_LWH = 1.0e-6*np.array([3178.61355, 2850.01504, 2946.82586, 2583.32212, 2154.12113, 1776.10654, 1678.82601, 1432.17589, 1432.55116, 1373.38119, 1302.58763, 1037.08851, 851.63025, 656.88936, 363.41241, 232.91443, 149.35528, 74.4072, 33.45079])
add_profile_to(Wise2019_data, "LWH", 3.0, "fH2_vs_Mgas", Mgas_LWH, fH2_LWH, r_unit="Msun", y_unit=None)


# ------------------------------------------------------------
#                      Data analysis routines
# ------------------------------------------------------------

def _get_raw_xy(halo: str, j21: float, quantity: str, store=None):
    """
    Fetch raw (r, y) from the given store and make it well-behaved:
    - remove non-finite points
    - sort by radius ascending
    - drop duplicate radii (keep first)
    Returns (r_sorted_unique, y_aligned).
    """
    if store is None:
        raise ValueError("No data store provided.")

    block = store[halo][quantity][float(j21)]
    r = np.asarray(block["r"], float)
    y = np.asarray(block["y"], float)

    m = np.isfinite(r) & np.isfinite(y)
    r, y = r[m], y[m]
    order = np.argsort(r)
    r, y = r[order], y[order]
    r_unique, idx = np.unique(r, return_index=True)
    y_unique = y[idx]
    return r_unique, y_unique


def _interp_log_with_extrap_options(x, y, x_eval, *,
                        left_extrap,   
                        right_extrap,
                        floor = None,
                        powerlaw_index = None):    
    """
    Interpolate y(x) at x_eval.

    Inside the data range:
      â€¢ If x>0 and y>0, do logâ€“log interpolation; otherwise fall back to linear.
      â€¢ No floor/ceil is applied inside.

    Outside the data range:
      â€¢ left_extrap & right_extrap can be:
        "endpoint" : use the nearest endpoint value
        "floor"    : use the provided `floor` value (if None, fall back to "endpoint")
        right_extrap only:
        "powerlaw" : use power-law extrapolation 

    Notes:
      - We do NOT clamp y to `floor` inside; `floor` is used only for extrapolation.
      - If any y<=0 (rare), linear interpolation is used.
    """
    x = np.asarray(x, float); y = np.asarray(y, float)
    x_eval = np.asarray(x_eval, float)

    # clean â†’ finite, sort, unique
    m = np.isfinite(x) & np.isfinite(y)
    x, y = x[m], y[m]
    if x.size == 0:
        raise ValueError("Empty input arrays after removing non-finite values.")
    order = np.argsort(x)
    x, y = x[order], y[order]
    x, idx = np.unique(x, return_index=True)
    y = y[idx]

    if x.size == 1:
        y_out = np.full_like(x_eval, y[0], dtype=float)
        return y_out

    xmin, xmax = x[0], x[-1]
    inside = (x_eval >= xmin) & (x_eval <= xmax)
    left   = (x_eval <  xmin)
    right  = (x_eval >  xmax)

    # choose space
    use_log = (np.all(x > 0) and np.all(y > 0))
    if use_log:
        yi = np.interp(np.log10(x_eval[inside]), np.log10(x), np.log10(y))
        y_inside = 10.0**yi
    else:
        y_inside = np.interp(x_eval[inside], x, y)

    y_out = np.empty_like(x_eval, dtype=float)
    y_out[inside] = y_inside

    # left extrapolation
    if np.any(left):
        if left_extrap == "floor" and (floor is not None):
            y_out[left] = floor
        else:
            y_out[left] = y[0]

    
    # right extrapolation
    if np.any(right):
        if right_extrap == "floor" and (floor is not None):
            y_out[right] = floor
        elif right_extrap == "powerlaw":
            if powerlaw_index is None:
                raise ValueError("right_extrap='powerlaw' requires powerlaw_index.")
            # Fit power-law: assume logâ€“log space near the end
            x0 = x[-1]
            y0 = y[-1]
            y_out[right] = y0 * (x_eval[right] / x0) ** powerlaw_index
        else:
            y_out[right] = y[-1]


    return y_out

def _build_r_grid(r_min, r_max, n_samples):
    """Log-spaced radius grid in the SAME unit as r_min/r_max."""
    return np.logspace(np.log10(r_min), np.log10(r_max), int(n_samples))


# ------------------------------
# 1) Mass-weighted H2 fraction
# ------------------------------

def mass_weighted_fH2(halo: str,
                      j21: float,
                      integral_mode: str,  # "radius" or "Mgas"
                      r_range: tuple[float, float] | None,
                      Mgas_range: tuple[float, float] | None,
                      profile_base: str,  # "radius" or "Mgas"
                      n_samples: int,
                      fH2_floor: float | None,
                      store: dict | None) -> dict:
    """
    Compute mass-weighted <f_H2> in a gas halo, within a radius or enclosed mass range.
    Extrapolation policies:
      - fH2: 'endpoint' on left, 'floor' on right (only outside data range)
      - density: 'endpoint' on left, 'powerlaw' with index -2 on right
    """
    if store is None:
        raise ValueError("No data store provided.")

    if integral_mode == "radius":
        if r_range is None:
            raise ValueError("r_range must be provided for integral_mode='radius'.")
        r_min, r_max = r_range
        if profile_base != "radius":
            raise ValueError("Only profile_base='radius' is supported for radius integral.")

        # Load radius-based profiles
        r_rho, rho = _get_raw_xy(halo, j21, "density", store=store)
        r_fh2, fh2 = _get_raw_xy(halo, j21, "fH2", store=store)

        r_grid = _build_r_grid(r_min, r_max, n_samples)

        # Interpolate with extrapolation handling
        rho_eval = _interp_log_with_extrap_options(r_rho, rho, r_grid,
                                                   left_extrap="endpoint",
                                                   right_extrap="powerlaw", powerlaw_index=-2)
        fH2_eval = _interp_log_with_extrap_options(r_fh2, fh2, r_grid,
                                                   left_extrap="endpoint",
                                                   right_extrap="floor", floor=fH2_floor)

        # Compute extrapolation factors
        fH2_extrap_factor = r_max / np.max(r_fh2)
        density_extrap_factor = r_max / np.max(r_rho)
        set_scalar_in(store, halo, j21, "fH2_extrap_r_factor", fH2_extrap_factor)
        set_scalar_in(store, halo, j21, "density_extrap_r_factor", density_extrap_factor)

        # Convert to physical units
        r_unit = _radius_unit_of_density(store, halo, j21)
        try:
            to_cm = RUNIT_TO_CM[r_unit]
        except KeyError:
            raise ValueError(f"Unsupported radius unit: {r_unit}")
        r_cm = r_grid * to_cm

        # Mass integration
        dMdr = 4.0 * np.pi * r_cm**2 * rho_eval
        log_r_cm = np.log10(r_cm)
        jacobian = r_cm * np.log(10)

        M_g = np.trapezoid(dMdr * jacobian, log_r_cm)
        fH2_avg = np.trapezoid(fH2_eval * dMdr * jacobian, log_r_cm) / M_g

    elif integral_mode == "Mgas":
        if Mgas_range is None:
            raise ValueError("Mgas_range must be provided for integral_mode='Mgas'.")
        M_min, M_max = Mgas_range

        if profile_base == "Mgas":
            Mgas_raw, fH2_raw = _get_raw_xy(halo, j21, "fH2_vs_Mgas", store=store)

            M_eval = np.logspace(np.log10(M_min), np.log10(M_max), n_samples)
            fH2_eval = _interp_log_with_extrap_options(Mgas_raw, fH2_raw, M_eval,
                                                        left_extrap="endpoint",
                                                        right_extrap="floor", floor=fH2_floor)

            extrap_factor = M_max / np.max(Mgas_raw)
            set_scalar_in(store, halo, j21, "fH2_extrap_Mgas_factor", extrap_factor)

            logM = np.log10(M_eval)
            jacobian = M_eval * np.log(10)

            numerator = np.trapezoid(fH2_eval * jacobian, logM)
            denominator = np.trapezoid(jacobian, logM)
            fH2_avg = numerator / denominator

        elif profile_base == "radius":

            r_rho, rho = _get_raw_xy(halo, j21, "density", store=store)
            r_fh2, fh2 = _get_raw_xy(halo, j21, "fH2", store=store)

            
            r_min = np.min(r_rho)
            r_max = np.max(r_rho) * 1000.0

            # print(f"Note: r_range for Mgas integral is set to [{r_min}, {r_max}]")
            r_grid = _build_r_grid(r_min, r_max, 5000)

            rho_eval = _interp_log_with_extrap_options(r_rho, rho, r_grid,
                                                       left_extrap="endpoint",
                                                       right_extrap="powerlaw", powerlaw_index=-2)
            fH2_eval = _interp_log_with_extrap_options(r_fh2, fh2, r_grid,
                                                       left_extrap="endpoint",
                                                       right_extrap="floor", floor=fH2_floor)

            r_unit = _radius_unit_of_density(store, halo, j21)
            try:
                to_cm = RUNIT_TO_CM[r_unit]
            except KeyError:
                raise ValueError(f"Unsupported radius unit: {r_unit}")
            r_cm = r_grid * to_cm

            dMdr = 4.0 * np.pi * r_cm**2 * rho_eval
            M_enc = cumulative_trapezoid(dMdr, r_cm, initial=0.0) / MSUN_G

            # Only trust the interpolation range, not the extrapolated max
            r_data_max_rho = np.max(r_rho)
            r_data_max_fh2 = np.max(r_fh2)

            logM_enc = np.log10(M_enc + 1e-30)
            def r_of_M(M):
                #from M[Msun] to r[cm]
                return np.interp(np.log10(M), logM_enc, r_cm)

            M_eval = np.logspace(np.log10(M_min), np.log10(M_max), n_samples)
            r_eval_cm = r_of_M(M_eval)
            r_eval = r_eval_cm / to_cm  # back to original unit


            # Interpolate fH2(r) â†’ fH2(M)
            fH2_M = np.interp(np.log10(r_eval), np.log10(r_grid), fH2_eval)
       

            logM = np.log10(M_eval)
            jacobian = M_eval * np.log(10)

            numerator = np.trapezoid(fH2_M * jacobian, logM)
            denominator = np.trapezoid(jacobian, logM)
            fH2_avg = numerator / denominator

            # Extrapolation factors using actual r_eval
            fH2_extrap_factor = np.max(r_eval) / r_data_max_fh2
            density_extrap_factor = np.max(r_eval) / r_data_max_rho
            set_scalar_in(store, halo, j21, "fH2_extrap_r_factor", fH2_extrap_factor)
            set_scalar_in(store, halo, j21, "density_extrap_r_factor", density_extrap_factor)

        else:
            raise ValueError("Invalid profile_base for Mgas mode")

    else:
        raise ValueError("integral_mode must be 'radius' or 'Mgas'.")

    return {
        "fH2_avg": fH2_avg
    }





def mass_weighted_fH2_from_fH2_vs_Mgas(halo: str,
                                       j21: float,
                                       M_min: float,
                                       M_max: float,
                                       fH2_floor: float | None,
                                       store: dict | None = None) -> dict:
    """
    Compute mass-weighted <f_H2> over [M_min, M_max] using fH2(Mgas) profile.

    Parameters
    ----------
    halo : str
        Halo name.
    j21 : float
        UV background (still needed for key structure, though not used here).
    M_min : float
        Minimum enclosed gas mass [Msun] for integration.
    M_max : float
        Maximum enclosed gas mass [Msun] for integration.
    fH2_floor : float or None
        Floor value for fH2 when extrapolating beyond the data range.
    store : dict
        Data store containing the 'fH2_vs_Mgas' profile.

    Returns
    -------
    dict with:
        - Mgas_Msun : total gas mass in the range
        - fH2_avg   : mass-weighted H2 fraction over the range
        - M_range   : [M_min, M_max]
        - fH2_interp: interpolated profile in the integration range
    """
    if store is None:
        raise ValueError("No data store provided.")

    # Load profile
    Mgas_raw, fH2_raw = _get_raw_xy(halo, j21, "fH2_vs_Mgas", store=store)

    if np.any(fH2_raw <= 0.0):
        raise ValueError("fH2 must be positive for logâ€“log interpolation.")

    # Interpolation in logâ€“log space
    M_eval = np.logspace(np.log10(M_min), np.log10(M_max), 1000)
    fH2_eval = _interp_log_with_extrap_options(
        Mgas_raw, fH2_raw, M_eval,
        left_extrap="endpoint",
        right_extrap="floor", floor=fH2_floor
    )

    # Record extrapolation factor (for diagnostics)
    M_data_max = np.max(Mgas_raw)
    extrap_factor = M_max / M_data_max
    set_scalar_in(store, halo, j21, "fH2_extrap_factor", extrap_factor)
    set_scalar_in(store, halo, j21, "Mgas_used", M_max)

    # Integration in log10 space
    logM = np.log10(M_eval)
    jacobian = M_eval * np.log(10)  # dM/dlogM

    numerator = np.trapezoid(fH2_eval * jacobian, logM)
    denominator = np.trapezoid(jacobian, logM)

    fH2_avg = numerator / denominator

    return {
        "fH2_avg": fH2_avg,
        "Mgas_Msun": denominator,
        "M_range": [M_min, M_max],
        "fH2_interp": fH2_eval,
    }


"""
#plot and compare profile for different j21
def plot_profiles(halo: str, quantity: str, j21_list: list,
                  r_min_pc=1e-3, r_max_pc=1e3, n_samples=1000, store=None):
    if store is None:
        store = Latif2019_data

    outputdir = "/home/zwu/21cm_project/unified_model/Analytic_results/Latif/"
    color_map_halo6 = {0.1:"green", 1.0:"blue", 10.0:"cyan", 100.0:"magenta", 1000.0:"red"}
    color_map_halo1 = {0.0:"green", 0.1:"blue", 1.0:"blue", 5.0:"cyan", 10.0:"magenta",
                       50.0:"red", 100.0:"green", 1000.0:"red"}
    linestyle_halo1 = {0.0:"dotted", 0.1:"dashed", 1.0:"solid", 5.0:"solid", 10.0:"solid",
                       50.0:"solid", 100.0:"solid", 1000.0:"dotted"}

    plt.figure(figsize=(8,6))
    for j21 in j21_list:
        r, y = _get_raw_xy(halo, j21, quantity, store=store)
        r_eval = _build_r_grid(r_min_pc, r_max_pc, n_samples)
        if quantity == "fH2":
            y_eval = _interp_log_with_extrap_options(r, y, r_eval, floor=5e-6)
        else:
            y_eval = _interp_log_with_extrap_options(r, y, r_eval)

        if halo == "halo6":
            color = color_map_halo6.get(float(j21), "black")
            plt.plot(r_eval, y_eval, label=f"J21={j21}", color=color)
        elif halo == "halo1":
            color = color_map_halo1.get(float(j21), "black")
            linestyle = linestyle_halo1.get(float(j21), "solid")
            plt.plot(r_eval, y_eval, label=f"J21={j21}", color=color, linestyle=linestyle)
        else:
            plt.plot(r_eval, y_eval, label=f"J21={j21}")

    plt.xscale('log'); plt.yscale('log')
    plt.xlabel("Radius (pc)")
    unit = store[halo][quantity][float(j21_list[0])]['units']['y']
    plt.ylabel(f"{quantity} ({unit})" if unit else f"{quantity} (dimensionless)")
    plt.title(f"{quantity} profile for {halo}")
    plt.legend()
    plt.grid(True, which="both", ls="--", lw=0.5)

    filename = os.path.join(outputdir, f"{halo}_{quantity}_profile.png")
    plt.savefig(filename, dpi=300); plt.close()
    print(f"Saved plot to {filename}")
"""

# ------------------------------------------------------------

if __name__ == "__main__":
    M = 2.6e7
    z = 16.4
    Rvir_Mpc = get_Rvir_analytic(M, z)
    Rvir_pc = Rvir_Mpc * 1e6
    
    print(f"Rvir (M={M:.2e} Msun, z={z}): {Rvir_pc:.3f} pc")
    exit()



    # Choose which paper's dataset to use
    store = Latif2019_data   # or: store = Latif2014A_data

    halo_name = "halo6"
    j21_val  = 10.0

    #print R200
    R200_pc = store[halo_name][float(j21_val)]["R200"]
    R200_unit = store[halo_name][float(j21_val)]["R200_unit"]
    print(f"R200: {R200_pc:.3f} {R200_unit}")


    # Compute mass-weighted <f_H2> and total gas mass (Msun)
    res = mass_weighted_fH2(
        halo_name, j21_val,
        r_min=1e-6*R200_pc, r_max=R200_pc, n_samples=1000,
        fH2_floor=1e-7,
        store=store,                 # <-- pass store explicitly
    )
    Mgas_Msun = res["Mgas_Msun"]
    print(f"fH2_avg: {res['fH2_avg']:.6e}, Mgas_Msun: {Mgas_Msun:.3e}")
    print(f"fH2 extrap factor: {store[halo_name][j21_val]['fH2_extrap_factor']:.3f}")
    print(f"density extrap factor: {store[halo_name][j21_val]['density_extrap_factor']:.3f}")

    # Read collapse scalars (ensure float key for J21)
    jkey = float(j21_val)
    M_collapse_Msun = store[halo_name][jkey]["M_collapse_Msun"]
    z_collapse      = store[halo_name][jkey]["z_collapse"]

    print(f"z_collapse: {z_collapse:.1f}, M_collapse_Msun: {M_collapse_Msun:.3e}")
    print("Mgas/M_collapse:", Mgas_Msun / M_collapse_Msun)
    print("Omega_b/Omega_m:", Omega_b / Omega_m)

